{"version":3,"sources":["components/DetailedInfo.js","components/ForecastTiles.js","constants/ActionTypes.js","constants/generalConstants.js","actions/WeatherStation.js","components/Dashboard.js","components/WeatherForecast.js","App.js","serviceWorker.js","reducers/WeatherStation.js","index.js"],"names":["DetailedInfo","_ref","data","getHour","time","Date","getUTCHours","getDate","date","getUTCDate","displayMoreInfo","item","i","react_default","a","createElement","className","key","concat","Math","round","main","temp","dt","src","weather","icon","map","ForecastTiles","_groupByDays","reduce","list","forecastDate","dt_txt","substr","push","_getDayInfo","getDay","_getIcon","_getInfo","min","arguments","length","undefined","max","humidity","windSpeed","temp_max","temp_min","wind","speed","minMax","apply","Object","toConsumableArray","avgHumdity","curr","next","avgWindspeed","_showMoreInfo","index","elm","_this","refs","expandedElment","document","querySelector","classList","add","remove","_this2","this","forecasts","props","tiles","values","forecastTiles","slice","ref","onClick","components_DetailedInfo","Component","FETCH_DATA_FULFILLED","FETCH_DATA_REJECTED","APP_ID","fetchData","region","dispatch","latitude","longitude","getDataByCity","getDataByCoords","location","axios","get","then","response","type","payload","catch","err","Dashboard","_updateCity","city","__cityInput","value","onDetectCity","_onkeyPress","e","_currentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","error","code","PERMISSION_DENIED","alert","onDetectLocation","wrapperClass","status","id","input","onKeyPress","placeholder","forecast","cod","connect","state","WeatherStation","WeatherForecast","components_Dashboard","ForecastTiles_ForecastTiles","React","App","components_WeatherForecast","Boolean","window","hostname","match","initialState","middleware","applyMiddleware","thunk","createLogger","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","objectSpread","ReactDOM","render","es","src_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"wPAsCeA,EApCM,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAEhBC,EAAU,SAAAC,GAAI,OAAIA,EAAO,IAAIC,KAAKD,GAAME,eAAgB,IAAID,MAAOC,eACnEC,EAAU,SAAAC,GAAI,OAAIA,EAAO,IAAIH,KAAKG,GAAMC,cAAe,IAAIJ,MAAOI,cAIlEC,EAAkB,SAACC,EAAMC,GAC7B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,IAAKL,GAChCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAf,GAAAE,OACMC,KAAKC,MAAMT,EAAKU,KAAKC,MAD3B,UAGAT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAf,GAAAE,OACMf,EAAkB,IAAVQ,EAAKY,IADnB,QAGEV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKS,IAAG,oCAAAN,OAAsCP,EAAKc,QAAQ,GAAGC,KAAtD,aAMpB,OACEb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZd,EAAKyB,IAAI,SAAChB,EAAMC,GAAP,OACPT,EAAkB,IAAVQ,EAAKY,IAAapB,KAAaI,EAAkB,IAAVI,EAAKY,MAAehB,IAClEG,EAAgBC,EAAMC,GACnBT,EAAkB,IAAVQ,EAAKY,KAAc,GAAKpB,EAAkB,IAAVQ,EAAKY,KAAc,GAC5Db,EAAgBC,EAAMC,GACrB,SC7BQgB,6MAGnBC,aAAe,SAAA3B,GACb,OAAQA,EAAK4B,OAAO,SAACC,EAAMpB,GACzB,IAAMqB,EAAerB,EAAKsB,OAAOC,OAAO,EAAE,IAI1C,OAHAH,EAAKC,GAAgBD,EAAKC,IAAiB,GAC3CD,EAAKC,GAAcG,KAAKxB,GAEjBoB,GACN,OAILK,YAAc,SAAAlC,GAEZ,MADmB,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YACpE,IAAIG,KAAkB,IAAbH,EAAK,GAAGqB,IAAWc,aAIhDC,SAAW,SAAApC,GAAI,0CAAAgB,OAAwChB,EAAK,GAAGuB,QAAQ,GAAGC,KAA3D,WAGfa,SAAW,SAACrC,GAAmD,IAA7CsC,EAA6CC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzC,GAAIG,EAAqCH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjC,GAAII,EAA6BJ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAApB,GAAGK,EAAiBL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GACtDvC,EAAKyB,IAAI,SAAChB,GACRiC,EAAIT,KAAKxB,EAAKU,KAAK0B,UACnBP,EAAIL,KAAKxB,EAAKU,KAAK2B,UACnBH,EAASV,KAAKxB,EAAKU,KAAKwB,UACxBC,EAAUX,KAAKxB,EAAKsC,KAAKC,SAG3B,IAAMC,EAAS,CACbX,IAAKrB,KAAKC,MAAMD,KAAKqB,IAALY,MAAAjC,KAAIkC,OAAAC,EAAA,EAAAD,CAAQb,KAC5BI,IAAKzB,KAAKC,MAAMD,KAAKyB,IAALQ,MAAAjC,KAAIkC,OAAAC,EAAA,EAAAD,CAAQT,MAIxBW,EAAapC,KAAKC,MAAMyB,EAASf,OAAO,SAAC0B,EAAMC,GAAP,OAAgBD,EAAOC,IAAQZ,EAASH,QAEhFgB,EAAavC,KAAKC,MAAM0B,EAAUhB,OAAO,SAAC0B,EAAMC,GAAP,OAAgBD,EAAOC,IAAQX,EAAUJ,QAExF,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,iBAAAG,OAAYiC,EAAOP,IAAnB,kBAAA1B,OAAkCiC,EAAOX,IAAzC,WAEF3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,kBAAAE,OACqBqC,EADrB,MAGA1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,oBAAAE,OACuBwC,EADvB,mBAQNC,cAAgB,SAACC,GACf,IAAMC,EAAMC,EAAKC,KAAL,OAAA7C,OAAiB0C,IACvBI,EAAiBC,SAASC,cAAc,aAE9CL,EAAIM,UAAUC,IAAI,YACC,OAAnBJ,GAA2BA,EAAeG,UAAUE,OAAO,qFAGpD,IAAAC,EAAAC,KAECC,EAAcD,KAAKE,MAAnBD,UACFE,EAAQrB,OAAOsB,OAAOJ,KAAK1C,aAAa2C,IAKxCI,EAAgBF,EAAMhC,OAAS,EAAIgC,EAAMG,MAAM,EAAG,GAAKH,EAE7D,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACZ4D,EAAcjD,IAAI,SAAChB,EAAMC,GAAP,OACjBC,EAAAC,EAAAC,cAAA,OACEC,UAAS,sBAAAE,OAAwBN,GACjCK,IAAKL,EACLkE,IAAG,OAAA5D,OAASN,GACZmE,QAAS,WAAOT,EAAKX,cAAc/C,KAEnCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACZsD,EAAKlC,YAAYzB,IAEnB2D,EAAK/B,SAAS5B,IAEjBE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAgBC,IAAKL,GAClCC,EAAAC,EAAAC,cAACiE,EAAD,CAAc9E,KAAMS,gBA3FSsE,aCH9BC,EAAuB,uBACvBC,EAAsB,sBCDtBC,EAAS,oDCKTC,EAAY,SAACC,GAAD,OAAY,SAACC,GAAa,IAAAtF,EACjBqF,GAAU,GAAlCE,EADyCvF,EACzCuF,SAAUC,EAD+BxF,EAC/BwF,UAEZC,EAAa,sDAAAxE,OAAyDoE,EAAzD,wBAAApE,OAAsFkE,GACnGO,EAAe,wDAAAzE,OAA2DsE,EAA3D,SAAAtE,OAA2EuE,EAA3E,wBAAAvE,OAA2GkE,GAE5HQ,EAA8B,kBAAZN,EAAuBK,EAAkBD,EAE/D,OAAOG,IAAMC,IAAIF,GACdG,KAAK,SAACC,GACLT,EAAS,CAACU,KAAMf,EAAsBgB,QAASF,EAAS9F,SAEzDiG,MAAM,SAACC,GACNb,EAAS,CAACU,KAAMd,EAAqBe,QAASE,QCd9CC,6MAEJC,YAAc,WACZ,IAAMC,EAAOzC,EAAK0C,YAAYC,MAEd,IAAhBF,EAAK7D,QAAeoB,EAAKW,MAAMiC,aAAaH,MAG9CI,YAAc,SAAAC,GAEF,UAAVA,EAAE3F,KAAkB6C,EAAKwC,iBAG3BO,iBAAkB,WACS,IAAIC,QAAQ,SAACC,EAAQC,GACxC,gBAAiBC,WACnBA,UAAUC,YAAYC,mBAAmB,SAACC,GACxCL,EAAQK,EAASC,SAChB,SAACC,GACCA,EAAMC,OAASD,EAAME,mBACtBC,MAAM,iCAMC1B,KAAK,SAACH,GACnB9B,EAAKW,MAAMiD,iBAAiB9B,KAC3BO,MAAM,WACPrC,EAAKW,MAAMiD,iBAAiB,qFAIvB,IAAApD,EAAAC,KAGFoD,EAAsC,WAAtBpD,KAAKE,MAAMmD,OAAuB,iCAAmC,oBAE1F,OACE/G,EAAAC,EAAAC,cAAA,OAAKC,UAAW2G,GACd9G,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,qBAEFH,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAjB,mBACAH,EAAAC,EAAAC,cAAA,SACEkF,KAAK,OACLjF,UAAU,aACV6G,GAAG,YACH/C,IAAK,SAAAgD,GAEH,OADAxD,EAAKkC,YAAcsB,EACZxD,EAAKkC,aAEduB,WAAYxD,KAAKoC,YACjBqB,YAAY,oBAEdnH,EAAAC,EAAAC,cAAA,SACEkF,KAAK,SACLQ,MAAM,IACNzF,UAAU,SACV+D,QAASR,KAAK+B,YACduB,GAAG,qBAGPhH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,SACCkF,KAAK,SACLjF,UAAU,uBACVyF,MAAM,uBACN1B,QAASR,KAAKsC,qBAIlBtC,KAAKE,MAAMwD,UAAwC,QAA5B1D,KAAKE,MAAMwD,SAASC,IAC5CrH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,SAAhB,iCAA6D,aA3E7CiE,aA8FTkD,cAZS,SAACC,GACrB,MAAO,CACLH,SAAUG,EAAMC,eAAenI,KAC/B0H,OAAQQ,EAAMC,eAAeT,SAGH,SAAArC,GAC5B,MAAM,CACFmB,aAAe,SAACH,GAAD,OAAUhB,EAASF,EAAUkB,KAC5CmB,iBAAmB,SAAC9B,GAAD,OAAcL,EAASF,EAAUO,OAG7CuC,CAAiD9B,GC7F1DiC,mLAKF,OACEzH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAACwH,EAAD,MACChE,KAAKE,MAAMwD,UAAsC,QAA1B1D,KAAKE,MAAMwD,SAASC,IAC5CrH,EAAAC,EAAAC,cAACyH,EAAD,CAAehE,UAAWD,KAAKE,MAAMwD,SAASlG,OAC9C,aAVsB0G,IAAMxD,WAsBrBkD,cANS,SAACC,GACrB,MAAO,CACLH,SAAUG,EAAMC,eAAenI,OAItBiI,CAAyBG,GCkBzBI,mLAbX,OAMI7H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4H,EAAD,cAjCQ1D,aCME2D,QACW,cAA7BC,OAAOjD,SAASkD,UAEe,UAA7BD,OAAOjD,SAASkD,UAEhBD,OAAOjD,SAASkD,SAASC,MACvB,8EChBAC,EAAa,CACfX,eAAe,CACXnI,KAAK,KACL0H,OAAO,2BCMTqB,EAAaC,YAAgBC,IAAOC,0BACpCC,EAAmBR,OAAOS,sCAAwCC,IAClEC,EAAQC,YDJC,WAA8C,IAA7BrB,EAA6B3F,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAvBuG,EAAeU,EAAQjH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3D,OAAQ+G,EAAOzD,MACb,KAAKf,EACH,OAAO7B,OAAAsG,EAAA,EAAAtG,CAAA,GACF+E,EADL,CAEEC,eAAe,CACfnI,KAAMwJ,EAAOxD,QACb0B,OAAQ,aAKZ,KAAKzC,EACH,OAAO9B,OAAAsG,EAAA,EAAAtG,CAAA,GACF+E,EADL,CAEEC,eAAe,CACfnI,KAAMwJ,EAAOxD,QAAQF,SAAS9F,KAC9B0H,OAAQ,YASd,OAAOQ,GCtBgDiB,EAAiBJ,IAE1EW,IAASC,OAAOhJ,EAAAC,EAAAC,cAAC+I,EAAA,EAAD,CAAUN,MAAOA,GAAO3I,EAAAC,EAAAC,cAACgJ,EAAD,OAAmB9F,SAAS+F,eAAe,SFkH7E,kBAAmB/C,WACrBA,UAAUgD,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.d2d6855f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DetailedInfo = ({ data }) => {\r\n\r\n  const getHour = time => time ? new Date(time).getUTCHours() : new Date().getUTCHours();\r\n  const getDate = date => date ? new Date(date).getUTCDate() : new Date().getUTCDate();\r\n\r\n  // const getIcon = datams => datams[0].weather[0].icon;\r\n\r\n  const displayMoreInfo = (item, i) => {\r\n    return (\r\n      <div className=\"hourly-info\" key={i}>\r\n        <div className=\"hour-temperature\">\r\n          {`${Math.round(item.main.temp)}Â°C`}\r\n        </div>\r\n        <div className=\"hour-of-the-day\">\r\n          {`${getHour(item.dt * 1000)}:00`}\r\n        </div>\r\n          <div>\r\n              <img src={`https://openweathermap.org/img/w/${item.weather[0].icon}.png`} />\r\n          </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"hourly\">\r\n      {data.map((item, i) => (\r\n        (getHour(item.dt * 1000) > getHour() && getDate(item.dt * 1000) === getDate()) ? (\r\n          displayMoreInfo(item, i)\r\n         ) : getHour(item.dt * 1000) >= 0 && getHour(item.dt * 1000) <= 23 ? (\r\n            displayMoreInfo(item, i)\r\n         ) : null\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DetailedInfo;","import React, { Component } from 'react';\r\nimport DetailedInfo from './DetailedInfo';\r\n\r\nexport default class ForecastTiles extends Component {\r\n\r\n  // Filters the data by date and returns an Object containing a list of 5-day forecast.\r\n  _groupByDays = data => {\r\n    return (data.reduce((list, item) => {\r\n      const forecastDate = item.dt_txt.substr(0,10);\r\n      list[forecastDate] = list[forecastDate] || [];\r\n      list[forecastDate].push(item);\r\n\r\n      return list;\r\n    }, {}));\r\n  };\r\n\r\n  // Returns week of the day\r\n  _getDayInfo = data => {\r\n    const daysOfWeek = [\"sunday\", \"monday\", \"tuesday\", \"wednesday\", \"thursday\", \"friday\", \"saturday\"];\r\n    return daysOfWeek[new Date(data[0].dt * 1000).getDay()];\r\n  };\r\n\r\n  // Fetches the icon using the icon code available in the forecast data.\r\n  _getIcon = data => `https://openweathermap.org/img/w/${data[0].weather[0].icon}.png`;\r\n\r\n  // Gets the Minimum, Maximum and Avg Humidity temperatures of the day.\r\n  _getInfo = (data, min=[], max=[], humidity=[],windSpeed=[]) => {\r\n    data.map((item) => {\r\n      max.push(item.main.temp_max);\r\n      min.push(item.main.temp_min);\r\n      humidity.push(item.main.humidity);\r\n      windSpeed.push(item.wind.speed);\r\n    });\r\n\r\n    const minMax = {\r\n      min: Math.round(Math.min(...min)),\r\n      max: Math.round(Math.max(...max)),\r\n    };\r\n\r\n    // Gets the day's average humdity\r\n    const avgHumdity = Math.round(humidity.reduce((curr, next) => curr + next) / humidity.length);\r\n\r\n    const avgWindspeed=Math.round(windSpeed.reduce((curr, next) => curr + next) / windSpeed.length);\r\n\r\n    return (\r\n      <div className=\"weather-info\">\r\n        <div className=\"min-max\">\r\n          <strong>{`${minMax.max}Â°C`} / {`${minMax.min}Â°C`}</strong>\r\n        </div>\r\n        <div className=\"more-info\">\r\n          {`Avg. Humidity: ${avgHumdity}%`}\r\n        </div>\r\n        <div className=\"more-info\">\r\n          {`Avg. Wind Speed: ${avgWindspeed} meter/sec`}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Toggles accordion to display hourly weather information\r\n  _showMoreInfo = (index) => {\r\n    const elm = this.refs[`div-${index}`];\r\n    const expandedElment = document.querySelector(\".expanded\");\r\n\r\n    elm.classList.add(\"expanded\");\r\n    expandedElment !== null && expandedElment.classList.remove(\"expanded\");\r\n  }\r\n\r\n  render() {\r\n\r\n    const { forecasts } = this.props;\r\n    const tiles = Object.values(this._groupByDays(forecasts));\r\n\r\n    // Edge case:\r\n    // When the webservice returns data for 6 calendar days during evenings as a result of offset,\r\n    // this ensures that we are showing only 5-days of forecast.\r\n    const forecastTiles = tiles.length > 5 ? tiles.slice(0, 5) : tiles;\r\n\r\n    return (\r\n      <div className=\"forecast-tiles\">\r\n        {forecastTiles.map((item, i) => (\r\n          <div\r\n            className={`forecast-tile tile-${i}`}\r\n            key={i}\r\n            ref={`div-${i}`}\r\n            onClick={() => {this._showMoreInfo(i)}}\r\n          >\r\n            <div className=\"primary-info\">\r\n              <div className=\"icon\">\r\n                {this._getDayInfo(item)}\r\n              </div>\r\n              {this._getInfo(item)}\r\n            </div>\r\n            <div className=\"detailed-info\" key={i}>\r\n              <DetailedInfo data={item} />\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}","export const FETCH_DATA_FULFILLED = \"FETCH_DATA_FULFILLED\";\r\nexport const FETCH_DATA_REJECTED = \"FETCH_DATA_REJECTED\";","export const APP_ID = \"fbf712a5a83d7305c3cda4ca8fe7ef29\";","import { FETCH_DATA_FULFILLED, FETCH_DATA_REJECTED } from \"../constants/ActionTypes\";\r\nimport { APP_ID } from \"../constants/generalConstants\";\r\n\r\nimport axios from \"axios\";\r\n\r\nexport const fetchData = (region) => (dispatch) => {\r\n  const { latitude, longitude } = region || {};\r\n\r\n  const getDataByCity = `https://api.openweathermap.org/data/2.5/forecast?q=${region}&units=metric&appid=${APP_ID}`;\r\n  const getDataByCoords = `https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${APP_ID}`;\r\n\r\n  let location = typeof(region) === \"object\" ? getDataByCoords : getDataByCity;\r\n\r\n  return axios.get(location)\r\n    .then((response) => {\r\n      dispatch({type: FETCH_DATA_FULFILLED, payload: response.data});\r\n    })\r\n    .catch((err) => {\r\n      dispatch({type: FETCH_DATA_REJECTED, payload: err}); // Error handling\r\n    });\r\n}","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchData } from \"../actions/WeatherStation\";\r\n\r\nclass Dashboard extends Component {\r\n\r\n  _updateCity = () => {\r\n    const city = this.__cityInput.value;\r\n    // eslint-disable-next-line no-unused-expressions\r\n    city.length !== 0 ? this.props.onDetectCity(city) : null;\r\n  }\r\n\r\n  _onkeyPress = e => {\r\n    // eslint-disable-next-line no-unused-expressions\r\n    e.key === \"Enter\" ? this._updateCity() : null\r\n  }\r\n\r\n  _currentLocation =()=>{\r\n      const detectLocation = new Promise((resolve,reject) => {\r\n      if (\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          resolve(position.coords);\r\n        }, (error) => {\r\n          if(error.code === error.PERMISSION_DENIED) {\r\n            alert(\"Error detecting location.\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    detectLocation.then((location) => {\r\n      this.props.onDetectLocation(location);\r\n    }).catch(() => {\r\n      this.props.onDetectLocation(\"London\");\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    // const { city, status } = this.props;\r\n   const wrapperClass = (this.props.status === \"failed\") ? \"weather-dashboard invalid-city\" : \"weather-dashboard\";\r\n\r\n    return (\r\n      <div className={wrapperClass}>\r\n        <header>\r\n          <h1 className=\"heading\">Weather Forecast</h1>\r\n        </header>\r\n        <section className=\"controls\">\r\n          <div className=\"searchWidth\">\r\n            <label className=\"labelPadding\">Search By City:</label>\r\n            <input\r\n              type=\"text\"\r\n              className=\"city-input\"\r\n              id=\"city-name\"\r\n              ref={input => {\r\n                this.__cityInput = input;\r\n                return this.__cityInput;\r\n              }}\r\n              onKeyPress={this._onkeyPress}\r\n              placeholder=\"Enter City Name\"\r\n            />\r\n            <input\r\n              type=\"button\"\r\n              value=\"&gt;\"\r\n              className=\"search\"\r\n              onClick={this._updateCity}\r\n              id=\"change-city-btn\"\r\n            />\r\n          </div>\r\n          <div className=\"locationWidth\">\r\n            <input\r\n             type=\"button\"\r\n             className=\"locationButtonHeight\"\r\n             value=\"Use Current Location\"\r\n             onClick={this._currentLocation}\r\n             />\r\n          </div>\r\n        </section>\r\n        {this.props.forecast && this.props.forecast.cod === '404'?\r\n        <span className=\"error\">Please enter valid city name!</span>:null\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      forecast: state.WeatherStation.data,\r\n      status: state.WeatherStation.status\r\n    }\r\n  };\r\n  const mapDispatchStateToProps=dispatch=>{\r\n    return{\r\n        onDetectCity : (city) => dispatch(fetchData(city)),\r\n        onDetectLocation : (location) => dispatch(fetchData(location))\r\n    }\r\n  }\r\nexport default connect(mapStateToProps,mapDispatchStateToProps)(Dashboard);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport ForecastTiles from './ForecastTiles';\r\nimport Dashboard from './Dashboard';\r\n\r\nclass WeatherForecast extends React.Component {\r\n\r\n    // const { city, list } = data;\r\n    // const { name } = city;\r\n    render () {\r\n    return (\r\n      <div className=\"weather-forecast-wrapper\">\r\n        <Dashboard />\r\n        {this.props.forecast && this.props.forecast.cod==='200' ?\r\n        <ForecastTiles forecasts={this.props.forecast.list}  /> :\r\n        null}\r\n      </div>\r\n    );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n      forecast: state.WeatherStation.data\r\n    }\r\n  };\r\n\r\nexport default connect(mapStateToProps)(WeatherForecast);","import React, { Component } from \"react\";\nimport './styles/main.scss'; \n// import { connect } from \"react-redux\";\n// import { fetchData } from './actions/WeatherStation';\nimport WeatherForecast from './components/WeatherForecast';\n\nclass App extends Component {\n\n  // Fetches data by using geolocation. If the user blocks, or if the browser does not support the API, \n  // fallsback to default location of London\n  // componentDidMount() {  \n  //   const detectLocation = new Promise((resolve,reject) => {\n  //     if (\"geolocation\" in navigator) {\n  //       navigator.geolocation.getCurrentPosition((position) => {\n  //         resolve(position.coords);\n  //       }, (error) => {\n  //         if(error.code === error.PERMISSION_DENIED) {\n  //           console.error(\"Error detecting location.\");\n  //         }\n  //       });\n  //     }\n  //   });\n\n  //   detectLocation.then((location) => {\n  //     this.props.onDetectLocation(location);\n  //   }).catch(() => {\n  //     this.props.onDetectLocation(\"London\");\n  //   });\n  // }\n\n  render() {\n\n    return (\n      // forecast === null ? (\n      //   <div className=\"loading\">\n      //     <div className=\"spinner\"></div>\n      //   </div>\n      // ) : (\n        <div>\n          <WeatherForecast />\n        </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_DATA_FULFILLED, FETCH_DATA_REJECTED } from \"../constants/ActionTypes\";\r\n\r\nconst initialState={\r\n    WeatherStation:{\r\n        data:null,\r\n        status:null\r\n    }\r\n};\r\n\r\nexport default function reducer(state=initialState , action) {\r\n  switch (action.type) {\r\n    case FETCH_DATA_FULFILLED: {\r\n      return {\r\n        ...state,\r\n        WeatherStation:{\r\n        data: action.payload,\r\n        status: \"success\"\r\n        }\r\n      };\r\n      // break;\r\n    }\r\n    case FETCH_DATA_REJECTED: {\r\n      return {\r\n        ...state,\r\n        WeatherStation:{\r\n        data: action.payload.response.data,\r\n        status: \"failed\"\r\n        }\r\n      };\r\n\r\n      console.error(`Could not fetch the data from webservice. ${action.payload}.`); // eslint-disable-line\r\n      break;\r\n    }\r\n  }\r\n\r\n  return state;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { compose, applyMiddleware, createStore } from 'redux';\nimport {Provider} from 'react-redux';\nimport reducer from './reducers/WeatherStation';\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\n\nconst middleware = applyMiddleware(thunk, createLogger());\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducer, /* preloadedState, */ composeEnhancers(middleware));\n\nReactDOM.render(<Provider store={store}><App /></Provider>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}